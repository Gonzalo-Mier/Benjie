/* Auto-generated by genmsg_cpp for file /home/sanson/fuerte_workspace/sandbox/benjie/msg/MarcadorArray.msg */
#ifndef BENJIE_MESSAGE_MARCADORARRAY_H
#define BENJIE_MESSAGE_MARCADORARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "benjie/Marcador.h"

namespace benjie
{
template <class ContainerAllocator>
struct MarcadorArray_ {
  typedef MarcadorArray_<ContainerAllocator> Type;

  MarcadorArray_()
  : marcadorArray()
  {
  }

  MarcadorArray_(const ContainerAllocator& _alloc)
  : marcadorArray(_alloc)
  {
  }

  typedef std::vector< ::benjie::Marcador_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::benjie::Marcador_<ContainerAllocator> >::other >  _marcadorArray_type;
  std::vector< ::benjie::Marcador_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::benjie::Marcador_<ContainerAllocator> >::other >  marcadorArray;


  typedef boost::shared_ptr< ::benjie::MarcadorArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::benjie::MarcadorArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MarcadorArray
typedef  ::benjie::MarcadorArray_<std::allocator<void> > MarcadorArray;

typedef boost::shared_ptr< ::benjie::MarcadorArray> MarcadorArrayPtr;
typedef boost::shared_ptr< ::benjie::MarcadorArray const> MarcadorArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::benjie::MarcadorArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::benjie::MarcadorArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace benjie

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::benjie::MarcadorArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::benjie::MarcadorArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::benjie::MarcadorArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d8fc041f5795b2bf581df4a274f1c19a";
  }

  static const char* value(const  ::benjie::MarcadorArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd8fc041f5795b2bfULL;
  static const uint64_t static_value2 = 0x581df4a274f1c19aULL;
};

template<class ContainerAllocator>
struct DataType< ::benjie::MarcadorArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "benjie/MarcadorArray";
  }

  static const char* value(const  ::benjie::MarcadorArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::benjie::MarcadorArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
Marcador[] marcadorArray\n\
\n\
================================================================================\n\
MSG: benjie/Marcador\n\
int16 id\n\
int16 cx\n\
int16 cy\n\
int16 alpha\n\
\n\
";
  }

  static const char* value(const  ::benjie::MarcadorArray_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::benjie::MarcadorArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.marcadorArray);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MarcadorArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::benjie::MarcadorArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::benjie::MarcadorArray_<ContainerAllocator> & v) 
  {
    s << indent << "marcadorArray[]" << std::endl;
    for (size_t i = 0; i < v.marcadorArray.size(); ++i)
    {
      s << indent << "  marcadorArray[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::benjie::Marcador_<ContainerAllocator> >::stream(s, indent + "    ", v.marcadorArray[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // BENJIE_MESSAGE_MARCADORARRAY_H

