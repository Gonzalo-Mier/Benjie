/* Auto-generated by genmsg_cpp for file /home/sanson/fuerte_workspace/sandbox/benjie/msg/Marcador.msg */
#ifndef BENJIE_MESSAGE_MARCADOR_H
#define BENJIE_MESSAGE_MARCADOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace benjie
{
template <class ContainerAllocator>
struct Marcador_ {
  typedef Marcador_<ContainerAllocator> Type;

  Marcador_()
  : id(0)
  , cx(0)
  , cy(0)
  , alpha(0)
  {
  }

  Marcador_(const ContainerAllocator& _alloc)
  : id(0)
  , cx(0)
  , cy(0)
  , alpha(0)
  {
  }

  typedef int16_t _id_type;
  int16_t id;

  typedef int16_t _cx_type;
  int16_t cx;

  typedef int16_t _cy_type;
  int16_t cy;

  typedef int16_t _alpha_type;
  int16_t alpha;


  typedef boost::shared_ptr< ::benjie::Marcador_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::benjie::Marcador_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Marcador
typedef  ::benjie::Marcador_<std::allocator<void> > Marcador;

typedef boost::shared_ptr< ::benjie::Marcador> MarcadorPtr;
typedef boost::shared_ptr< ::benjie::Marcador const> MarcadorConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::benjie::Marcador_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::benjie::Marcador_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace benjie

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::benjie::Marcador_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::benjie::Marcador_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::benjie::Marcador_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b5fac42d34c58923bebd74e8155f7edc";
  }

  static const char* value(const  ::benjie::Marcador_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb5fac42d34c58923ULL;
  static const uint64_t static_value2 = 0xbebd74e8155f7edcULL;
};

template<class ContainerAllocator>
struct DataType< ::benjie::Marcador_<ContainerAllocator> > {
  static const char* value() 
  {
    return "benjie/Marcador";
  }

  static const char* value(const  ::benjie::Marcador_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::benjie::Marcador_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 id\n\
int16 cx\n\
int16 cy\n\
int16 alpha\n\
\n\
";
  }

  static const char* value(const  ::benjie::Marcador_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::benjie::Marcador_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::benjie::Marcador_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.cx);
    stream.next(m.cy);
    stream.next(m.alpha);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Marcador_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::benjie::Marcador_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::benjie::Marcador_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "cx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cx);
    s << indent << "cy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cy);
    s << indent << "alpha: ";
    Printer<int16_t>::stream(s, indent + "  ", v.alpha);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BENJIE_MESSAGE_MARCADOR_H

